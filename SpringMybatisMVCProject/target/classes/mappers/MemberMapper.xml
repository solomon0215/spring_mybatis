<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MemberMapper">
	
<cache />
	<sql id="basecolumn">
		USER_ID,USER_PW,USER_NAME,USER_BIRTH,USER_GENDER
		, USER_EMAIL, USER_ADDR, USER_PH1,USER_PH2, USER_REGIST
	</sql>
	<resultMap type="memDTO" id="baseMember">
	    <!-- 
	    	MemberDTO memDTO = new MemberDTO();
	    	memDTO.setUserId(rs.gertString("USER_ID"));
	     -->
		<id column="USER_ID" jdbcType="VARCHAR" property="userId"/>
		<!-- memDTO.setUserPw(rs.getString("USER_PW")); -->
		<result column="USER_PW" jdbcType="VARCHAR" property="userPw"/>
		<result column="USER_NAME" jdbcType = "VARCHAR" property="userName"/>
		<result column="USER_BIRTH" jdbcType="TIMESTAMP" property="userBirth"/>
		<result column="USER_GENDER" jdbcType="CHAR" property="userGender"/>
		<result column="USER_EMAIL" jdbcType="VARCHAR" property="userEmail"/>
		<result column="USER_ADDR" jdbcType="VARCHAR" property="userAddr"/>
		<result column="USER_PH1" jdbcType="VARCHAR" property="userPh1"/>
		<result column="USER_PH2" jdbcType="VARCHAR" property="userPh2"/>
		<result column="USER_REGIST" jdbcType="TIMESTAMP" property="userRegist"/>
	</resultMap>
	<insert id="memberInsert" parameterType="memDTO">
		insert into member( <include refid="basecolumn" /> )
		values(#{userId},#{userPw},#{userName},#{userBirth},
		#{userGender},#{userEmail},#{userAddr},#{userPh1},
		#{userPh2},sysdate)
	</insert>
	<update id="memberUserCk" parameterType="memDTO">
		update member
		set user_ck = #{userCK}
		where user_email = #{userEmail} and user_name = #{userName} 
		and user_ck is null
	</update>
	<select id="selectMemberAll" resultType="string">
		select user_email from member 
	</select>
	<select id="userCheck" parameterType = "memDTO" resultMap="baseMember" >
		select 
			<include refid="basecolumn" />
		from member
		<trim prefix="where" prefixOverrides="AND |OR ">
			<if test="userPw != null">
			user_pw = #{userPw}
			</if>
			and user_id = #{userId} 
		</trim>
	</select> 
	<update id="memberUpdate" parameterType="memDTO">
		update member
		<trim prefix="set" suffixOverrides=",">
			<if test = "userEmail != null"> 
			user_email = #{userEmail},
			</if>
		    user_addr = #{userAddr},
		    user_ph1 = #{userPh1},
		    <choose>
			    <when test="userPh2 != null">
			    user_ph2 = #{userPh2}
			    </when>
			    <when test="userPh2 == null">
			    user_ph2 = null
			    </when>
			</choose>
		</trim>
		<where>
			 user_id = #{userId} And user_pw = #{userPw}
		</where>    
	</update>
	<update id="updatePassword"  parameterType="pwchg" >
		update member
		<set>
			user_pw = #{newPw}
		</set>
		<where>
			user_id = #{userId} and user_pw = #{pw1}
		</where>
	</update>
	
	<select id="memberCount" resultType="int" parameterType= "listcmd">
		select count(*) from member
		<trim prefix="where" prefixOverrides="AND |OR ">
		 <if test="from != null and to != null">
		 and user_regist between #{from} and #{to} 
		 </if>
		</trim>
	</select>
	
	<select id = "memberList" parameterType= "startEnd" resultMap="baseMember" >
		select rownum , rn , <include refid="basecolumn" />
		from (select  rownum rn , <include refid="basecolumn" />
			from (select <include refid="basecolumn" /> 
				  from member
				  <where>
					<if test="listCommand.from != null and listCommand.to != null">
					user_regist between #{listCommand.from} and #{listCommand.to} 
					</if>
    			  </where> 
				  order by user_regist desc
				  ))
		where rn &gt;= #{startRow} and rn &lt;= #{endRow}
		
	</select>
</mapper>



			





